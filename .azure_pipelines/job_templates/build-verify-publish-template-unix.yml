# PyTorch build steps template with Unix images Azure DevOps Instances
#
# This build depends on 3 parameters set as environment variables in the pipeline:
#   - AZURE_DEVOPS_CLI_PAT: Secret var for authenticating to Azure DevOps
#   - AZURE_DEVOPS_ARTIFACTS_ORGANIZATION: Azure Artifacts Organization name to publish artifacts
#   - AZURE_DEVOPS_ARTIFACTS_PROJECT: Azure Artifacts Project name to publish artifacts

parameters:
  name: ''
  pool: ''
  container_endpoint: ''
  os: ''
  cuda: ''
  is_ci_build: False
  is_official_build: False
  is_daily_build: False
  build_stage: False
  verify_stage: False
  publish_stage: False
  custom_tests_stage: False
  customMatrixes: ''

jobs:
- job: ${{parameters.name}}
  timeoutInMinutes: 300
  strategy:
    matrix:
      ${{ insert }}: ${{parameters.customMatrixes}}
  pool:
    name: ${{ parameters.pool}}
  variables:
    DECODE_PERCENTS: false
  container:
    image: $[variables['container_image']]
    endpoint: ${{parameters.container_endpoint}}

  steps:
  # Build stage
  - ${{ if eq(parameters.build_stage, 'True') }}:
    # Set up environment variables for specific pipeline build
    - template: set-environment-variables.yml
      parameters:
        os: ${{ parameters.os}}
        cuda: ${{ parameters.cuda}}
        is_official_build: ${{ parameters.is_official_build}}

    # Sync and update PyTorch submodules
    - bash: git submodule update --init --recursive
      displayName: Update PyTorch submodules

    # Build PyTorch and run unit tests - no packaging
    - ${{ if or(eq(parameters.is_ci_build, 'True'), eq(parameters.is_daily_build, 'True')) }}:
      # Build PyTorch from source in develop mode
      - bash: python setup.py develop
        displayName: Build PyTorch from source

      - ${{ if eq(parameters.is_ci_build, 'True') }}:
        # Run TestTorch unit tests to demonstrate successful PyTorch build
        - bash: python test/test_torch.py TestTorch
          displayName: Run TestTorch unit tests

      - ${{ if eq(parameters.is_daily_build, 'True') }}:
        # Run all unit tests to demonstrate successful PyTorch build
        - bash: python test/run_test.py --continue-through-error --exclude-jit-executor --verbose
          displayName: Run all unit tests

      # Run ComponentGovernance
      - task: ComponentGovernanceComponentDetection@0
        inputs:
          scanType: 'Register'
          verbosity: 'Verbose'
          alertWarningLevel: 'High'

    # Build PyTorch and produce artifacts for verification stage
    - ${{ if eq(parameters.is_official_build, 'True') }}:
      # Build PyTorch from source in install mode and exclude test binaries
      - bash: python setup.py install
        displayName: Build PyTorch from source without test binaries

      # Package PyTorch Wheel
      - bash: python setup.py bdist_wheel
        displayName: Package PyTorch Wheel

      # Publish PyTorch Wheel
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(Build.SourcesDirectory)/dist/
          artifactName: Build_$(Build.BuildNumber)_$(configuration)
        displayName: Publish PyTorch Wheel to Pipeline Artifacts

  # Verification stage
  - ${{ if eq(parameters.verify_stage, 'True') }}:
    # Download PyTorch Wheel
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: Build_$(Build.BuildNumber)_$(configuration)
        path: $(Build.SourcesDirectory)/verify
      displayName: Download PyTorch Wheel

    # Install PyTorch Wheel on Linux
    - bash: python -m pip install $(Build.SourcesDirectory)/verify/torch*linux*.whl
      displayName: Install PyTorch Wheel

    # Ensure PyTorch installed correctly from produced wheel
    - bash: |
        cd $(Build.SourcesDirectory)/verify
        python -c "import torch; print('Installed Torch version: ' + torch.__version__)"
      displayName: Check PyTorch correctly installed from wheel

  # Publishing stage
  - ${{ if eq(parameters.publish_stage, 'True') }}:
    # Download PyTorch Wheel
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: Build_$(Build.BuildNumber)_$(configuration)
        path: $(Build.SourcesDirectory)/publish
      displayName: Download PyTorch Wheel

    # Publish wheel to Azure Artifacts
    # The flag continueOnError=true is needed as the artifact to be published
    # may already exist, because the artifact is differentiated based on the
    # last commit date.
    - bash: |
        export TORCH_VERSION=$(head -c 5 ./version.txt)
        export LAST_COMMIT=$(git rev-parse --short HEAD)
        export LAST_COMMIT_DATE=$(git log -1 --pretty=%ad --date=format:%Y%m%d)
        cd $(Build.SourcesDirectory)/publish
        export TORCH_WHEEL=$(echo torch*linux*whl)
        az extension add -n azure-devops
        echo $ADOTOKEN | az devops login
        az artifacts universal publish --organization $AZURE_DEVOPS_ARTIFACTS_ORGANIZATION --project $AZURE_DEVOPS_ARTIFACTS_PROJECT --scope project --feed "PyTorch" --name $TORCH_WHEEL --description "PyTorch Official Build Artifact" --version $TORCH_VERSION-$LAST_COMMIT_DATE-$LAST_COMMIT --path .
      env:
        ADOTOKEN: $(AZURE_DEVOPS_CLI_PAT)
      continueOnError: true
      displayName: Upload PyTorch Official Build package to Azure Artifacts

  # Custom Tests stage
  - ${{ if eq(parameters.custom_tests_stage, 'True') }}:
    # Download PyTorch Wheel
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: Build_$(Build.BuildNumber)_$(configuration)
        path: $(Build.SourcesDirectory)/built_whl
      displayName: Download PyTorch Wheel

    # Clone Custom Tests repository
    - bash: |
        B64_PAT=$(printf "%s"":$ADOTOKEN" | base64)
        git -c http.extraHeader="Authorization: Basic ${B64_PAT}" clone $AZURE_DEVOPS_CUSTOM_TESTS_REPO_URL
        cd custom_tests
        git checkout mubal/use_scripts
      env:
        ADOTOKEN: $(AZURE_DEVOPS_CLI_PAT)
      displayName: Clone custom tests repo

    # Run Custom Unit Tests
    - bash: sh $(Build.SourcesDirectory)/custom_tests/scripts/linux/run.sh
      displayName: Run Custom Unit Tests
